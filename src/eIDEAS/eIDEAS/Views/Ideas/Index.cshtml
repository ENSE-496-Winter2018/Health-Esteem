@using eIDEAS.Models
@using eIDEAS.Models.Enums
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> UserManager
@model IEnumerable<IdeaPresentationViewModel>

@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var user = UserManager.GetUserAsync(User);
    var loggedInUserID = user.Result.Id;
}

<h2>@ViewBag.PageName</h2>

<div class="row">
    <div class="col-md-2" style="float: left">
        <p>
            <a class="btn btn-primary" asp-action="Create">Create Idea</a>
        </p>
    </div>
    <div class="col-md-4" style="float: right">
        <div class="input-group">
            <input type="text" id="filter-search-box" class="form-control" placeholder="Search" />
            <span class="fa fa-times clearinput"></span>
            <div class="input-group-btn">
                @if (ViewBag.filterType != "MyDrafts")
                {
                    <div class="dropdown" style="display: inline">
                        <a class="btn btn-primary dropdown-toggle" data-toggle="dropdown"><span class="glyphicon glyphicon-filter"></span></a>
                        <ul id="filter-menu" class="dropdown-menu" style="left: -119px; top: 15px">
                            <li data-filterStyle="New">New<i id="filter-new" style="float: right;display:none;" class="fa fa-check"></i></li>
                            <li data-filterStyle="Top">Top<i id="filter-top" style="float: right;display:none;" class="fa fa-check"></i></li>
                            <li data-filterStyle="Tracked">Tracked<i id="filter-tracked" style="float: right;display:none;" class="fa fa-check"></i></li>
                            <li data-filterStyle="Planning">Planning<i id="filter-planning" style="float: right;display:none;" class="fa fa-check"></i></li>
                            <li data-filterStyle="Doing">Doing<i id="filter-doing" style="float: right;display:none;" class="fa fa-check"></i></li>
                            <li data-filterStyle="Checking">Checking<i id="filter-checking" style="float: right;display:none;" class="fa fa-check"></i></li>
                            <li data-filterStyle="Adopting">Adopting<i id="filter-adopting" style="float: right;display:none;" class="fa fa-check"></i></li>
                            <li data-filterStyle="Adapting">Adapting<i id="filter-adapting" style="float: right;display:none;" class="fa fa-check"></i></li>
                            <li data-filterStyle="Abandoning">Abandoning<i id="filter-abandoning" style="float: right;display:none;" class="fa fa-check"></i></li>
                        </ul>
                    </div>
                }
            </div>
        </div>
    </div>
    <div style="float:right; padding-top: 6px">
        <span>Only show my ideas: </span>
        <label class="switch">
            <input id="show-my-ideas" type="checkbox">
            <span class="slider round"></span>
        </label>
    </div>
</div>

@foreach (var idea in Model)
{
    int status = (int)idea.Overview.Status;
    //Create variables used for the display of the status progress bar
    string doClass = "progress-bar-waiting";
    string checkClass = "progress-bar-waiting";
    string actClass = "progress-bar-waiting";
    string actText = "Act";

    //The display of the progress bar depends on how far the idea has made it in the PDCA process.
    //An idea will have always reached at least the "Plan" stage.
    switch (idea.Overview.Status)
    {
        case StatusEnum.Do:
            doClass = "progress-bar-info";
            break;
        case StatusEnum.Check:
            doClass = "progress-bar-info";
            checkClass = "progress-bar-info";
            break;
        case StatusEnum.Adopt:
            doClass = "progress-bar-info";
            checkClass = "progress-bar-info";
            actClass = "progress-bar-success";
            actText = StatusEnum.Adopt.ToString();
            break;
        case StatusEnum.Adapt:
            doClass = "progress-bar-info";
            checkClass = "progress-bar-info";
            actClass = "progress-bar-warning";
            actText = StatusEnum.Adapt.ToString();
            break;
        case StatusEnum.Abandon:
            doClass = "progress-bar-info";
            checkClass = "progress-bar-info";
            actClass = "progress-bar-danger";
            actText = StatusEnum.Abandon.ToString();
            break;
        default:
            break;
    }

    //An idea is completed if it is in the Adopt, Adapt or Abandon stage
    bool isCompleted = (idea.Overview.Status >= StatusEnum.Adopt);

    <div class="panel panel-primary idea-overview" data-tracked="@idea.IsTracked" data-status="@idea.Overview.Status" data-authorid="@idea.Overview.UserID" data-ideaid="@idea.Overview.ID" style="padding:0px; background-color:#F2F2F2;">
        <!-- IDEA TITLE BAR -->
        <div class="site-primary panel-heading col-md-12 lead idea-panel-expand" id="@idea.Overview.ID-title" data-target="#idea-@idea.Overview.ID-details">
            @Html.DisplayFor(modelItem => idea.Overview.Title)
        </div>

        <!-- IDEA BODY -->
        <div class="panel-body">
            @if (!ViewBag.IsDraft)
            {
                <div class="row">
                    <div class="col-md-11">
                        <p class="no-margin" style="font-size:12px;"><em>Submitted <span id="@idea.Overview.ID-timestamp"class="panel-timestamp" data-utctime="@idea.Overview.DateCreated.ToLocalTime()">on @idea.Overview.DateCreated.ToLocalTime()</span> by @idea.AuthorFirstName @idea.AuthorLastName</em></p>
                        <p>to <strong>@idea.UnitName</strong></p>
                    </div>
                    <div class="col-md-1">
                        <img class="idea-panel-expand" id="idea-@idea.Overview.ID-details-arrow" data-target="#idea-@idea.Overview.ID-details" src="~/images/arrow-right.png" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-10 col-sm-12">

                        <!-- IDEA PROGRESS BAR -->
                        <div class="progress" style="height:20px;margin-top:10px;">
                            <div id="@idea.Overview.ID-progress-plan" class="progress-bar progress-bar-info" role="progressbar" style="width:25%;">Plan</div>
                            <div id="@idea.Overview.ID-progress-do" class="progress-bar @doClass" role="progressbar" style="width:25%;">Do</div>
                            <div id="@idea.Overview.ID-progress-check" class="progress-bar @checkClass" style="width:25%;">Check</div>
                            <div id="@idea.Overview.ID-progress-act" class="progress-bar @actClass" role="progressbar" style="width:25%;">@actText</div>
                        </div>
                    </div>
                    @if (!isCompleted)
                    {
                        <!-- IDEA ACTIONS -->
                        <div class="col-md-2 col-sm-12">
                            <div id="@idea.Overview.ID-button-group-advance" class="row" @{ if (!(idea.Overview.Status == StatusEnum.Plan || idea.Overview.Status == StatusEnum.Do)) { <text> style="display:none" </text>  } }>
                                <div class="btn-group" style="margin-top:10px;">
                                    <button style="height:20px;padding-top:0px;padding-bottom:0px;" id="@idea.Overview.ID-button-advance" data-toggle="tooltip" title="Advance Idea" class="btn btn-sm btn-primary idea-panel-advance" data-status="@status" data-ideaid="@idea.Overview.ID"><i class="fas fa-play"></i></button>
                                    <button style="height:20px;padding-top:0px;padding-bottom:0px;" type="button" class="btn btn-sm btn-danger idea-panel-abandon" data-toggle="tooltip" title="Abandon Idea" data-ideaid="@idea.Overview.ID"><i class="fas fa-times"></i></button>
                                </div>
                            </div>
                            <div id="@idea.Overview.ID-button-group-finalize" class="row" @{ if (!(idea.Overview.Status == StatusEnum.Check)) { <text> style="display:none" </text>  } }>
                                <div class="btn-group" style="margin-top:10px;">
                                    <button style="height:20px;padding-top:0px;padding-bottom:0px;" type="button" class="btn btn-sm btn-success idea-panel-adopt" data-toggle="tooltip" title="Adopt Idea" data-ideaid="@idea.Overview.ID"><i class="fas fa-check"></i></button>
                                    <button style="height:20px;padding-top:0px;padding-bottom:0px;" type="button" class="btn btn-sm btn-warning idea-panel-adapt" data-toggle="tooltip" title="Adapt Idea" data-ideaid="@idea.Overview.ID"><i class="fas fa-balance-scale"></i></button>
                                    <button style="height:20px;padding-top:0px;padding-bottom:0px;" type="button" class="btn btn-sm btn-danger idea-panel-abandon" data-toggle="tooltip" title="Abandon Idea" data-ideaid="@idea.Overview.ID"><i class="fas fa-times"></i></button>
                                </div>
                            </div>
                        </div>
                    }
                </div>

                <!-- FINALIZE IDEA FORM -->
                <div id="@idea.Overview.ID-input-group-finalize" class="row" style="display:none;margin-bottom:20px;">
                    <div class="col-md-6 col-sm-12 ">
                        <textarea id="@idea.Overview.ID-textbox-message" class="form-control idea-panel-finalize-message" placeholder="Enter your message" style="height: 100px;"></textarea>
                        <br />
                        <button class="btn btn-danger idea-panel-finalize-cancel" data-ideaid="@idea.Overview.ID">Cancel</button>
                        <button id="@idea.Overview.ID-button-finalize" class="btn btn-primary idea-panel-finalize" data-status="@status" data-ideaid="@idea.Overview.ID">Finalize</button>
                    </div>
                </div>
            }

            <div id="idea-@idea.Overview.ID-details" style="padding:10px; border-top-style:solid;border-width:1px 0px 0px 0px;border-color:#ddd;  @(ViewBag.isDraft ? "" : "display:none;")">

                <!-- IDEA DESCRIPTION -->

                <div class="row">
                    <div class="col-md-6">
                        <div class="row">
                            <div class="col-md-12">
                                <h4>Problem Description</h4>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-12">
                                <div class="aproblem-description" style="padding: 5px">
                                    @Html.DisplayFor(modelItem => idea.Overview.Description)
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="row">
                            <div class="col-md-12">
                                <h4>Solution Plan</h4>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-12">
                                <div class="asolution-plan" style="padding: 5px">
                                    @Html.DisplayFor(modelItem => idea.Overview.SolutionPlan)
                                </div>
                            </div>
                        </div>

                    </div>

                    <!-- IDEA COMMENTS SECTION -->

                    <div class="col-md-12">
                        @if (!ViewBag.IsDraft)
                        {
                            @Html.Partial("../Amendments/Index", idea.Amendments, new ViewDataDictionary(ViewData){
                                { "IdeaID", @idea.Overview.ID }
                            })

                            <div id="idea-@idea.Overview.ID-amendments" class="row">
                                <div class="col-md-5 col-md-offset-7 col-sm-12 col-sm-offset-0" align="right">
                                    <form>
                                        <input type="hidden" name="IdeaID" id="IdeaID-@idea.Overview.ID" value="@idea.Overview.ID">
                                        <textarea name="Comment" id="Comment-@idea.Overview.ID" class="form-control idea-panel-finalize-message" placeholder="Enter your comment here" style="height: 70px; margin-top: 10px; margin-bottom: 10px"></textarea>
                                        <input type="button" id="amendmentSubmit" class="btn btn-sm btn-primary idea-panel-submit-ammendment" data-target="@idea.Overview.ID" value="Submit Comment" />
                                    </form>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="row" style="margin-top: 10px;">
                                <div class="col-md-10 col-md-offset-2" align="right">
                                    <span>
                                        <a asp-action="EditDraft" asp-route-id="@idea.Overview.ID" class="btn btn-sm btn-default " role="button" style="padding: 1px 5px 0px 5px">Edit Draft</a>
                                    </span>
                                </div>
                            </div>
                        }

                    </div>
                </div>
            </div>
        </div>
        <!-- IDEA FOOTER -->

        <div class="panel-footer">
            <div class="row">
                <div class="col-md-5" style="padding-top: 4px">
                    <span>Track Idea: </span>
                    <label class="switch">
                        @{
                            var checkedModifier = idea.IsTracked ? "checked" : "";
                        }
                        <input class="track-idea" data-idea-id="@idea.Overview.ID" type="checkbox" @checkedModifier>
                        <span class="slider round"></span>
                    </label>

                </div>
                <div class="col-md-7">
                    <div class="row form-group">
                        <div class="col-md-4" style="padding-top: 4px">
                            <input type="hidden" id="@idea.Overview.ID-previous-rating" name="@idea.Overview.ID-previous-rating" value="@idea.UserRating" required="required">
                            <span>Average Rating: </span>
                            <span id="@idea.Overview.ID-average-rating" data-rating="@idea.AverageRating">@(idea.AverageRating != -1 ? idea.AverageRating.ToString() : "-")</span> / 5
                        </div>
                        <div class="col-md-7">
                            <span>Your Rating: </span>
                            @for (int possibleRating = 1; possibleRating <= 5; possibleRating++)
                            {
                                <button type="button" class="btnrating btn btn-sm @(idea.UserRating >= possibleRating ? "btn-primary" : "btn-default")" data-rating="@possibleRating" data-idea-id="@idea.Overview.ID" id="@idea.Overview.ID-rating-star-@possibleRating">
                                    <i class="fa fa-star"></i>
                                </button>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@section Scripts {
    <script type="text/javascript">

        /*
         * MVP 4 TODO:
         * TODO: Shrink finalize button cause wilson - group discussion about this
         * TODO: Cancel/Close the finalize form if they decide they dont want to anymore
         * TODO: Make the finalize form and ammendment forms have consistent styling
         * TODO: Reorganize the data layout of tracking, rating, ammendments, and finalizing
         * TODO: Invetigate firefox support
         * TODO: Make the force a message error nicer
         */

        // Enum of status values to prevent magical numbers
        var statuses = { 'plan': 0, 'do': 1, 'check': 2, 'adopt': 3, 'adapt': 4, 'abandon': 5 };

        // Global filter variable
            /*
             * filter = {
             *  'top':true,
             *  'new':true,
             *  'team':true,
             *  'status':['P/D/C/A/A/A'],
             *  'search':'',
             *  'tracked':false,
             * } 
             */
        var filter = {};

        // Speed constants for animated transitions
        var speeds = {
            transitions: {
                slow: 500,
                fast: 250
            }
        };

        // Returns human readable date difference
        function timeDifference(previous) {

            var current = new Date().getTime();

            previous = previous.replace(/-/g, '/');
            previous = Date.parse(previous);

            var msPerMinute = 60 * 1000;
            var msPerHour = msPerMinute * 60;
            var msPerDay = msPerHour * 24;
            var msPerMonth = msPerDay * 30;
            var msPerYear = msPerDay * 365;

            var elapsed = current - previous;

            if (elapsed < msPerMinute) {
                var seconds = Math.round(elapsed / 1000);
                if (seconds == 1)
                    return 'a second ago'
                else
                    return seconds + ' seconds ago';
            }

            else if (elapsed < msPerHour) {
                var minutes = Math.round(elapsed / msPerMinute);
                if (minutes == 1)
                    return 'a minute ago'
                else
                    return minutes + ' minutes ago';
            }

            else if (elapsed < msPerDay) {
                var hours = Math.round(elapsed / msPerHour);
                if (hours == 1)
                    return 'an hour ago'
                else
                    return hours + ' hours ago';
            }

            else if (elapsed < msPerMonth) {
                var days = Math.round(elapsed / msPerDay);
                if (days == 1)
                    return 'a day ago'
                else
                    return days + ' days ago';
            }

            else if (elapsed < msPerYear) {
                var months = Math.round(elapsed / msPerMonth);
                if (months == 1)
                    return 'a month ago'
                else
                    return months + ' months ago';
            }

            else {
                var years = Math.round(elapsed / msPerYear);
                if (years == 1)
                    return 'a year ago'
                else
                    return years + ' years ago';
            }
        }

        // Changes absolute timestamps to relative timestamps to increase human readableness
        function updateTimestamps() {
            $('.panel-timestamp').each(function () {
                if (!$(this).data('calculated')) {
                    var utctime = $(this).data('utctime')
                    $(this).html(timeDifference(utctime));
                    $(this).data('calculated', true);
                }
            });
        }

        // Updates the colorizing of the progress bar
        function updateTimeline(ideaid, status) {
            // Do
            if (status >= statuses['do']) {
                $('#' + ideaid + '-progress-do').addClass('progress-bar-info');
                $('#' + ideaid + '-progress-do').removeClass('progress-bar-waiting');
            }

            // Check
            if (status >= statuses['check']) {
                $('#' + ideaid + '-progress-check').addClass('progress-bar-info');
                $('#' + ideaid + '-progress-check').removeClass('progress-bar-waiting');
            }

            // Adopt
            if (status == statuses['adopt']) {
                $('#' + ideaid + '-progress-act').addClass('progress-bar-success');
                $('#' + ideaid + '-progress-act').text('Adopt');
                $('#' + ideaid + '-progress-act').removeClass('progress-bar-waiting');
            }

            // Adapt
            if (status == statuses['adapt']) {
                $('#' + ideaid + '-progress-act').addClass('progress-bar-warning');
                $('#' + ideaid + '-progress-act').text('Adapt');
                $('#' + ideaid + '-progress-act').removeClass('progress-bar-waiting');
            }

            // Abandon
            if (status == statuses['abandon']) {
                $('#' + ideaid + '-progress-act').addClass('progress-bar-danger');
                $('#' + ideaid + '-progress-act').text('Abandon');
                $('#' + ideaid + '-progress-act').removeClass('progress-bar-waiting');
            }

        }

        // Updating which buttons are shown after advancing/finalizing an idea
        function updateButtons(ideaid, status) {
            // Change the current status data associated with the advance button
            if (status >= statuses['do']) {
                $('#' + ideaid + '-button-advance').data('status', status);
            }

            // Change which group of buttons are showing - if any
            if (status < statuses['check']) {
                $('#' + ideaid + '-button-group-advance').show();
                $('#' + ideaid + '-button-group-finalize').hide();
            } else if (status == statuses['check']) {
                $('#' + ideaid + '-button-group-advance').hide();
                $('#' + ideaid + '-button-group-finalize').show();
            } else {
                $('#' + ideaid + '-button-group-advance').hide();
                $('#' + ideaid + '-button-group-finalize').hide();
            }
        }

        // Helper function for updating a panel UI
        function updatePage(ideaid, status) {
            updateTimeline(ideaid, status);
            updateButtons(ideaid, status);
        }

        // Updating a status for adapt, abandon (Extra message field required)
        function finalizeStatus(ideaid, status, message) {
            if (!confirm("Are you sure you want to finalize the status of this idea?\nThis action is irreversible."))
                return;

            message = message.trim();
            if (!message) {
                alert('You must enter a message.');
                return;
            }

            $.ajax({
                url: '/Ideas/Status/' + ideaid,
                type: "POST",
                data: { 'status': status, 'message': message },
                success: function (result) {
                    console.log(JSON.stringify(result));
                    updatePage(ideaid, status);
                },
                error: function (result) {
                    console.log("Error");
                }
            });
        }

        // Updating a status for plan, do, check, adopt
        function updateStatus(ideaid, status) {
            $.ajax({
                url: '/Ideas/Status/' + ideaid,
                type: "POST",
                data: { 'status': status, 'message': null },
                success: function (result) {
                    console.log(JSON.stringify(result));
                    updatePage(ideaid, status);
                },
                error: function (result) {
                    console.log("Error");
                }
            });
        }

        // Advance an idea
        $('.idea-panel-advance').click(function (event) {
            event.cancelBubble = true;
            if (event.stopPropagation) event.stopPropagation();

            if (!confirm("Are you sure you want to advance the status of this idea?\nThis action is irreversible."))
                return;

            var ideaid = $(this).data('ideaid');
            var status = $(this).data('status') + 1;
            if (status <= statuses['adopt']) {
                updateStatus(ideaid, status);
            } else {
                alert('Stop trying to hack the app');
            }
        });

        // Finalizing an idea after submitting abandon/adapting with a message
        $('.idea-panel-finalize').click(function (event) {
            event.cancelBubble = true;
            if (event.stopPropagation) event.stopPropagation();

            var ideaid = $(this).data('ideaid');
            var desiredStatus = $(this).data('status');
            var message = $('#' + ideaid + '-textbox-message').val();

            finalizeStatus(ideaid, desiredStatus, message);

            $('#' + ideaid + '-input-group-finalize').hide();
        });

        // Adopt an idea
        $('.idea-panel-adopt').click(function (event) {
            event.cancelBubble = true;
            if (event.stopPropagation) event.stopPropagation();

            if (!confirm("Are you sure you want to advance this idea to the adopt status?\nThis action is irreversible."))
                return;

            var ideaid = $(this).data('ideaid');
            var status = statuses['adopt'];
            updateStatus(ideaid, status);
        });

        // Adapt an idea
        $('.idea-panel-adapt').click(function (event) {
            event.cancelBubble = true;
            if (event.stopPropagation) event.stopPropagation();

            var ideaid = $(this).data('ideaid');
            var status = statuses['adapt'];

            $('#' + ideaid + '-textbox-message').val("");
            $('#' + ideaid + '-textbox-message').attr("placeholder", "Reason for adaption");
            $('#' + ideaid + '-input-group-finalize').slideDown(speeds.transitions.fast);
            $('#' + ideaid + '-button-finalize').data('status', status);
        });

        // Abandon an idea
        $('.idea-panel-abandon').click(function (event) {
            event.cancelBubble = true;
            if (event.stopPropagation) event.stopPropagation();

            var ideaid = $(this).data('ideaid');
            var status = statuses['abandon'];

            $('#' + ideaid + '-textbox-message').val("");
            $('#' + ideaid + '-textbox-message').attr("placeholder", "Reason for abandonment");
            $('#' + ideaid + '-input-group-finalize').slideDown(speeds.transitions.fast);
            $('#' + ideaid + '-button-finalize').data('status', status);
        });

        $('.idea-panel-finalize-message').click(function (event) {
            event.cancelBubble = true;
            if (event.stopPropagation) event.stopPropagation();
        });

        // Expand/Contract panel to see description, solution plan, etc.
        $('.idea-panel-expand').click(function (event) {
            event.cancelBubble = true;
            if (event.stopPropagation) event.stopPropagation();
            target = $($(this).data('target'));

            var img = $($(this).data('target') + '-arrow');

            if (img.attr('src').endsWith('arrow-right.png')) {
                img.attr('src', "images/arrow-down.png");
                target.slideDown(speeds.transitions.slow);
            }
            else {
                img.attr('src', "images/arrow-right.png");
                target.slideUp(speeds.transitions.slow);
            }
        });

        // Expand/Contract ammendments form
        $('.idea-panel-expand-ammendments').click(function (event) {
            event.cancelBubble = true;
            if (event.stopPropagation) event.stopPropagation();

            target = $($(this).data('target'));

            if ($(target).is(":hidden"))
                target.slideDown(speeds.transitions.slow);
            else
                target.slideUp(speeds.transitions.slow);
        });

        // Cancel and contract the finalize form
        $('.idea-panel-finalize-cancel').click(function (event) {
            event.cancelBubble = true;
            if (event.stopPropagation) event.stopPropagation();

            target = $('#' + $(this).data('ideaid') + '-input-group-finalize');

            target.slideUp(speeds.transitions.fast);
        });

        // For amendment submission
        $('.idea-panel-submit-ammendment').click(function (event) {
            event.cancelBubble = true;
            if (event.stopPropagation) event.stopPropagation();

            id = $(this).data('target');

            comment = document.getElementById("Comment-" + id).value;

            if (!(/\S/.test(comment)))
                return;

            $.ajax({
                url: '@Url.Action("Update","Amendments")',
                type: "POST",
                data: { 'ideaID': id, 'comment': comment},
                success: function (result) {
                    // refreshes partial view
                    $('#amendment-partial-' + id).html(result);
                    document.getElementById('Comment-' + id).value = '';
                    updateTimestamps();
                }
            });
        });

        // Sets up tooltips
        $(document).ready(function () {
            $('[data-toggle="tooltip"]').tooltip();

            updateTimestamps();
        });

        // Allow the user to track an idea
        $(".track-idea").click(function () {
            var ideaID = $(this).attr("data-idea-id");
            var isNowTracking = $(this).is(':checked');
            $.ajax({
                url: '@Url.Action("TrackStatus", "Ideas")',
                type: "POST",
                data: { 'ideaID': ideaID, 'tracked': isNowTracking}
            });
        });

        // Allow the user to rate an idea
        $(".btnrating").click(function () {
            //Obtain information required to update the rating
            var ideaID = $(this).attr("data-idea-id");
            var previousRating = $("#" + ideaID + "-previous-rating").val();
            var selectedRating = $(this).attr("data-rating");

            $.ajax({
                url: '@Url.Action("Rate", "Ideas")',
                type: "POST",
                data: { 'ideaID': ideaID, 'rating': selectedRating },
                success: function (newAverageRating) {
                    // Update the user's rating
                    $("#" + ideaID + "-previous-rating").val(selectedRating);

                    // Update the appearance of the stars to reflect the user's rating
                    for (i = 1; i <= selectedRating; ++i) {
                        $("#" + ideaID + "-rating-star-" + i).toggleClass('btn-primary');
                        $("#" + ideaID + "-rating-star-" + i).toggleClass('btn-default');
                    }
                    for (j = 1; j <= previousRating; ++j) {
                        $("#" + ideaID + "-rating-star-" + j).toggleClass('btn-primary');
                        $("#" + ideaID + "-rating-star-" + j).toggleClass('btn-default');
                    }

                    // Update the average rating of the idea
                    $("#" + ideaID + "-average-rating").empty();
                    $("#" + ideaID + "-average-rating").html(newAverageRating);
                }
            });
        });
        
        function filterIdeas() {
            if (filter === null) {
                filter = {};
            }
            var topfilter = ('top' in filter) ? filter['top'] : false;
            var newfilter = ('new' in filter) ? filter['new'] : false;
            var statusfilter = ('status' in filter) ? filter['status'] : [];
            var searchfilter = ('search' in filter) ? filter['search'] : "";
            var teamfilter = ('team' in filter) ? filter['team'] : true;
            var trackedfilter = ('tracked' in filter) ? filter['tracked'] : false;

            $(".idea-overview").each(function () {

                // Show all by default.
                $(this).show();
                var hideMe = false;

                // Initialize filter data for current idea
                var thisideaid = $(this).data('ideaid');
                var thisdate = $("#" + thisideaid + "-timestamp").data('utctime');
                thisdate = thisdate.replace(/-/g, '/');
                thisdate = Date.parse(thisdate);
                var thisrating = $("#" + thisideaid + "-average-rating").data('rating'); //string
                var thisstatus = $(this).data('status');
                var thisauthor = $(this).data("authorid")
                var thistitle = $("#" + thisideaid + "-title").get(0).innerHTML;
                var isthistracked = $(this).data('tracked'); //String

                // Determine what to hide:

                // Only hide if a status filter is set.
                if (statusfilter.length > 0) {
                    //Hide if this status is not in the filter.
                    if (statusfilter.indexOf(thisstatus) === -1) {
                        hideMe = true;
                    }
                }

                // Hide ideas if wanting individual ideas.
                if (!teamfilter) {
                    //Check if the author is the user.
                    if (thisauthor != "@loggedInUserID") {
                        hideMe = true;
                    }
                }

                // Hide ideas if they don't match the search
                breakpoint: if (searchfilter != "") {
                    var expression = ".*" + searchfilter + ".*";
                    var regex = new RegExp(expression);
                    // If the reg-ex matches the title, keep showing the idea.
                    if (regex.test(thistitle.toLowerCase())) {
                        break breakpoint;
                    }

                    // If the reg-ex matches the author, keep showing the idea.
                    if (regex.test(thisauthor.toLowerCase())) {
                        break breakpoint;
                    }

                    // If none of the RegEx matched, hide content.
                    hideMe = true;
                }

                // If the trackedFilter is set, hide items not tracked
                if (trackedfilter) {
                    if (isthistracked === "False") {
                        hideMe = true;
                    }
                }

                // Make hidden
                if (hideMe) {
                    $(this).hide();
                }
            });

            //Sorting filters

            if (top === true) {
                //TODO
            }

            if (newfilter === true) {
                //TODO
            }
        }

        //Allow the user to view only their own ideas
        $("#show-my-ideas").click(function () {
            if ($(this).is(':checked')) {
                filter['team'] = false;
            } else {
                filter['team'] = true;
            }
            filterIdeas();
        });

        //Allow the user to view only their own ideas
        $("#filter-menu").click(function (e) {
            //TODO: Reset checkmarks based on active filters.

            var filterText = e.target.dataset["filterstyle"];
            toggleFilterIcon(filterText);
            switch (filterText) {
                case "Top":
                    filter['top'] = ('top' in filter) ? !filter['top'] : true;
                    break;
                case "New":
                    filter['new'] = ('new' in filter) ? !filter['new'] : true;
                    break;
                case "Planning":
                    toggleStatusFilter("Plan");
                    break;
                case "Doing":
                    toggleStatusFilter("Do");
                    break;
                case "Checking":
                    toggleStatusFilter("Check");
                    break;
                case "Adopting":
                    toggleStatusFilter("Adopt");
                    break;
                case "Abandoning":
                    toggleStatusFilter("Abandon");
                    break;
                case "Adapting":
                    toggleStatusFilter("Adapt");
                    break;
                case "Tracked":
                    filter['tracked'] = ('tracked' in filter) ? !filter['tracked'] : true;
                    break;
            }
            filterIdeas();
        });

        function toggleStatusFilter(status){
            if ('status' in filter) {
                var index = filter['status'].indexOf(status);
                if (index > -1) {
                    // Remove the element from the array
                    filter['status'].splice(index, 1);
                } else {
                    // Add the element to the array
                    filter['status'].push(status);
                }
            } else {
                // Create the array
                filter['status'] = [status]
            }
        }

        function toggleFilterIcon(filterName) {
            if ($("#filter-" + filterName.toLowerCase()).is(":hidden")) {
                $("#filter-" + filterName.toLowerCase()).show();
            } else {
                $("#filter-" + filterName.toLowerCase()).hide();
            }
        }

        $("#filter-search-box").keyup(function () {
            filter['search'] = $(this).get(0).value.toLowerCase();
            //Convert wildcard searches to a wildcard in regex.
            filter['search'].replace("*", ".*");
            filterIdeas();
        });

        $(".clearinput").click(function () {
            filter['search'] = "";
            $("#filter-search-box").get(0).value = "";
            filterIdeas();
        });

    </script>
}
